<?php
/*
    This file is part of the eQual framework <http://www.github.com/equalframework/equal>
    Some Rights Reserved, Cedric Francoys, 2010-2024
    Licensed under GNU LGPL 3 license <http://www.gnu.org/licenses/>
*/
use core\Passkey;
use core\setting\Setting;
use equal\auth\JWT;
use lbuchs\WebAuthn\Binary\ByteBuffer;
use lbuchs\WebAuthn\WebAuthn;

[$params, $providers] = eQual::announce([
    'description'   => 'Authenticate a user using a passkey.',
    'params'        => [
        'auth_token' => [
            'type'          => 'string',
            'description'   => 'Auth token that contains the challenge.',
            'required'      => true
        ],
        'credential_id' => [
            'type'          => 'string',
            'description'   => 'Id a the credential used.',
            'required'      => true
        ],
        'client_data_json' => [
            'type'          => 'string',
            'description'   => 'Client data given to create passkey, is encoded in base64.',
            'required'      => true
        ],
        'authenticator_data' => [
            'type'          => 'string',
            'description'   => 'Information generated by the authenticator, including details like the counter and flags.',
            'required'      => true
        ],
        'signature' => [
            'type'          => 'string',
            'description'   => 'The signature produced by the authenticator using the private key.',
            'required'      => true
        ],
        'user_handle' => [
            'type'          => 'string',
            'description'   => 'Anonymous user identifier.',
            'help'          => 'In WebAuthn, the user_handle allows the authenticator to link a specific passkey to the correct user during authentication, without exposing sensitive or human-readable information (e.g. login or username).'
        ]
    ],
    'response'      => [
        'content-type'  => 'application/json',
        'charset'       => 'UTF-8',
        'accept-origin' => '*'
    ],
    'access'        => [
        'visibility'    => 'public'
    ],
    'constants'     => ['AUTH_ACCESS_TOKEN_VALIDITY', 'AUTH_TOKEN_HTTPS', 'APP_NAME', 'BACKEND_URL', 'AUTH_SECRET_KEY'],
    'providers'     => ['context', 'auth']
]);

/**
 * @var \equal\php\Context                  $context
 * @var \equal\auth\AuthenticationManager   $auth
 */
['context' => $context, 'auth' => $auth] = $providers;

$rp_id = Setting::get_value('core', 'security', 'passkey_rp_id', parse_url(constant('BACKEND_URL'), PHP_URL_HOST));
$rp_name = Setting::get_value('core', 'security', 'passkey_rp_name', constant('APP_NAME'));

$passkey_formats = ['android-key', 'android-safetynet', 'apple', 'fido-u2f', 'none', 'packed', 'tpm'];
$allowed_formats = [];
foreach($passkey_formats as $format) {
    $is_format_allowed = Setting::get_value('core', 'security', "passkey_format_$format", true);
    if($is_format_allowed) {
        $allowed_formats[] = $format;
    }
}

// #memo - creating WebAuthn with empty 'formats' array makes the process fail silently
$webAuthn = new WebAuthn($rp_name, $rp_id, $allowed_formats);

$credential_id = base64_decode($params['credential_id']);
$client_data_json = base64_decode($params['client_data_json']);
$authenticator_data = base64_decode($params['authenticator_data']);
$signature = base64_decode($params['signature']);

$passkey = Passkey::search(['credential_id', '=', (new ByteBuffer($credential_id))->getHex()])
    ->read([
        'user_id' => [
            'id',
            'login',
            'username',
            'validated'
        ],
        'credential_public_key',
        'signature_counter',
        'fmt'
    ])
    ->first();

if(is_null($passkey)) {
    throw new Exception('passkey_not_found', EQ_ERROR_UNKNOWN_OBJECT);
}

if(is_null($passkey['user_id'])) {
    throw new Exception('user_not_found', EQ_ERROR_INVALID_USER);
}

if(!$passkey['user_id']['validated']) {
    throw new Exception('user_not_validated', EQ_ERROR_NOT_ALLOWED);
}

/*
// retrieve user_id from user_handle
$settingValue = SettingValue::search([['name', '=', 'core.security.passkey_user-handle'], ['value', '=', $params['user_handle']]])
            ->read(['id', 'user_id'])
            ->first();

if(!$settingValue) {
    throw new Exception('invalid_user_handle', EQ_ERROR_INVALID_PARAM);
}

if($passkey['user_id']['id'] !== $settingValue['user_id']) {
    throw new Exception('user_handle_does_not_match', EQ_ERROR_INVALID_PARAM);
}

// remove temporary user_handle
SettingValue::id($settingValue['id'])->delete(true);
*/

if($passkey['user_id']['id'] !== intval($params['user_handle'])) {
    throw new Exception('user_handle_does_not_match', EQ_ERROR_INVALID_PARAM);
}

// ensure that the token has been emitted by this server
if(!$auth->verifyToken($params['auth_token'], constant('AUTH_SECRET_KEY'))) {
    throw new Exception("invalid_token", EQ_ERROR_INVALID_PARAM);
}

$auth_token = JWT::decode($params['auth_token']);

// #memo - processGet checks for decreasing counter (the counter should always increase)
$webAuthn->processGet($client_data_json, $authenticator_data, $signature, $passkey['credential_public_key'], ByteBuffer::fromHex($auth_token['payload']['challenge']), $passkey['signature_counter'], true);

// #memo - the signature counter detects key cloning
$sign_count = $webAuthn->getSignatureCounter();

if($sign_count && $sign_count != $passkey['signature_counter']) {
    Passkey::id($passkey['id'])
        ->update(['signature_counter' => $sign_count]);
}

// generate access token
$access_token = $auth->token(
        // user identifier
        $passkey['user_id']['id'],
        // validity of the token
        constant('AUTH_ACCESS_TOKEN_VALIDITY'),
        // authentication method to register to AMR
        // #todo - set auth_level based on $passkey['fmt']
        [
            'auth_type'     => 'passkey',
            'auth_level'    => 2
        ]
    );

$context->httpResponse()
        ->cookie('access_token',  $access_token, [
            'expires'   => time() + constant('AUTH_ACCESS_TOKEN_VALIDITY'),
            'httponly'  => true,
            'secure'    => constant('AUTH_TOKEN_HTTPS'),
            'domain'    => parse_url(constant('BACKEND_URL'), PHP_URL_HOST)
        ])
        ->status(204)
        ->send();
