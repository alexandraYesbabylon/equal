<?php
/*
    This file is part of the eQual framework <http://www.github.com/equalframework/equal>
    Some Rights Reserved, Cedric Francoys, 2010-2024
    Licensed under GNU LGPL 3 license <http://www.gnu.org/licenses/>
*/

use core\Passkey;
use equal\auth\JWT;
use lbuchs\WebAuthn\Binary\ByteBuffer;
use lbuchs\WebAuthn\WebAuthn;

[$params, $providers] = announce([
    'description'   => 'Authenticate a user using a passkey.',
    'params'        => [
        'auth_token' => [
            'type'          => 'string',
            'description'   => 'Auth token that contains the challenge.',
            'required'      => true
        ],
        'credential_id' => [
            'type'          => 'string',
            'description'   => 'Id a the credential used.',
            'required'      => true
        ],
        'client_data_json' => [
            'type'          => 'string',
            'description'   => 'Client data given to create passkey, is encoded in base64.',
            'required'      => true
        ],
        'authenticator_data' => [
            'type'          => 'string',
            'description'   => 'Information generated by the authenticator, including details like the counter and flags.',
            'required'      => true
        ],
        'signature' => [
            'type'          => 'string',
            'description'   => 'The signature produced by the authenticator using the private key.',
            'required'      => true
        ],
        'user_handle' => [
            'type'          => 'string',
            'description'   => 'An optional identifier for the user. (Should be needed only if require resident key)'
        ]
    ],
    'response'      => [
        'content-type'  => 'application/json',
        'charset'       => 'UTF-8',
        'accept-origin' => '*'
    ],
    'access' => [
        'visibility'    => 'public'
    ],
    'providers'     => ['context', 'auth']
]);

/**
 * @var \equal\php\Context                  $context
 * @var \equal\auth\AuthenticationManager   $auth
 */
['context' => $context, 'auth' => $auth] = $providers;

$rp_id = 'localhost';
$formats = ['android-key', 'android-safetynet', 'apple', 'fido-u2f', 'none', 'packed', 'tpm'];

$webAuthn = new WebAuthn('eQual Passkey', $rp_id, $formats);

$credential_id = base64_decode($params['credential_id']);
$client_data_json = base64_decode($params['client_data_json']);
$authenticator_data = base64_decode($params['authenticator_data']);
$signature = base64_decode($params['signature']);
$user_handle = base64_decode($params['user_handle']);

$passkey = Passkey::search(['credential_id', '=', (new ByteBuffer($credential_id))->getHex()])
    ->read(['user_id' => ['passkey_user_handle'], 'credential_public_key', 'signature_counter'])
    ->first();

if(is_null($passkey)) {
    throw new Exception('passkey_not_found', EQ_ERROR_UNKNOWN_OBJECT);
}

if($user_handle !== $passkey['user_id']['passkey_user_handle']) {
    throw new Exception('user_handle_does_not_match', EQ_ERROR_INVALID_PARAM);
}

$auth_token = JWT::decode($params['auth_token']);

$webAuthn->processGet($client_data_json, $authenticator_data, $signature, $passkey['credential_public_key'], ByteBuffer::fromHex($auth_token['payload']['challenge']), $passkey['signature_counter'], true);

// TODO: Generate access token and add it to cookies

$sign_count = $webAuthn->getSignatureCounter();
if(!is_null($sign_count)) {
    Passkey::id($passkey['id'])
        ->update(['signature_counter' => $webAuthn->getSignatureCounter()]);
}

$context->httpResponse()
        ->status(200)
        ->body(['success' => true])
        ->send();
